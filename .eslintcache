[{"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\index.js":"1","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\App.js":"2","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\header\\Header.jsx":"3","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\button\\Button.jsx":"4","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\Scedule.jsx":"5","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\calendar\\Calendar.jsx":"6","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\input-date\\InputDate.jsx":"7","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\room-select\\RoomSelect.jsx":"8","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\participant-select\\ParticipantSelect.jsx":"9","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-header\\SceduleHeader.jsx":"10","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\formatEventData.js":"11","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-room\\SceduleRoom.js":"12","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\utils\\index.js":"13","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\getDateWithResetTime.js":"14","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\form-event\\FormEventApollo.jsx":"15","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\form-event\\FormEventContainer.jsx":"16","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\form-event\\FormEventView.jsx":"17","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\form-event\\index.js":"18","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\queries.js":"19","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\workingHours.js":"20","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\isPastDay.js":"21","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-timeline\\SceduleTimeline.jsx":"22","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-timeline\\scedule-event\\SceduleEvent.jsx":"23","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-timeline\\ButtonToCreateEvent.jsx":"24","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-aside\\SceduleAside.jsx":"25","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-aside\\scedule-label\\SceduleLabel.jsx":"26","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\hooks\\useModalSevice\\index.js":"27","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\hooks\\useModalSevice\\EventSuccess.jsx":"28"},{"size":1239,"mtime":1628014873773,"results":"29","hashOfConfig":"30"},{"size":658,"mtime":1618127789218,"results":"31","hashOfConfig":"30"},{"size":993,"mtime":1619973816626,"results":"32","hashOfConfig":"30"},{"size":289,"mtime":1618127692948,"results":"33","hashOfConfig":"30"},{"size":2567,"mtime":1618127693634,"results":"34","hashOfConfig":"30"},{"size":2243,"mtime":1618127693019,"results":"35","hashOfConfig":"30"},{"size":3032,"mtime":1618127693287,"results":"36","hashOfConfig":"30"},{"size":1449,"mtime":1618127886926,"results":"37","hashOfConfig":"30"},{"size":4129,"mtime":1618127693350,"results":"38","hashOfConfig":"30"},{"size":2564,"mtime":1618127693495,"results":"39","hashOfConfig":"30"},{"size":591,"mtime":1618127671364,"results":"40","hashOfConfig":"30"},{"size":2575,"mtime":1616837162107,"results":"41","hashOfConfig":"30"},{"size":2457,"mtime":1618127671267,"results":"42","hashOfConfig":"30"},{"size":157,"mtime":1618127671378,"results":"43","hashOfConfig":"30"},{"size":3990,"mtime":1621081743273,"results":"44","hashOfConfig":"30"},{"size":3648,"mtime":1618127693147,"results":"45","hashOfConfig":"30"},{"size":3985,"mtime":1619890391371,"results":"46","hashOfConfig":"30"},{"size":66,"mtime":1618127671018,"results":"47","hashOfConfig":"30"},{"size":1465,"mtime":1618127671132,"results":"48","hashOfConfig":"30"},{"size":605,"mtime":1618127671412,"results":"49","hashOfConfig":"30"},{"size":109,"mtime":1618127671393,"results":"50","hashOfConfig":"30"},{"size":2196,"mtime":1618127831394,"results":"51","hashOfConfig":"30"},{"size":2222,"mtime":1619900185306,"results":"52","hashOfConfig":"30"},{"size":1049,"mtime":1618127841899,"results":"53","hashOfConfig":"30"},{"size":598,"mtime":1618129762867,"results":"54","hashOfConfig":"30"},{"size":318,"mtime":1618127693422,"results":"55","hashOfConfig":"30"},{"size":983,"mtime":1619948576020,"results":"56","hashOfConfig":"30"},{"size":1982,"mtime":1621085667144,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"oxb85h",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"60"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"60"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\index.js",[],["126","127"],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\App.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\header\\Header.jsx",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\button\\Button.jsx",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\Scedule.jsx",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\calendar\\Calendar.jsx",["128"],"import { useState, forwardRef, useEffect } from \"react\";\r\nimport \"./Calendar.css\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { parse, addDays, subDays, isToday } from \"date-fns\";\r\nimport ru from \"date-fns/locale/ru\";\r\nimport { ReactComponent as ArrowLeftIcon } from \"../icons/arrow-left.svg\";\r\nimport { ReactComponent as ArrowRightIcon } from \"../icons/arrow-right.svg\";\r\n\r\nfunction CustomInput({ value, onClick, onNextDay, onPrevDay }, _ref) {\r\n  const format = (value) => {\r\n    // value = MMMM/dd/yyyy\r\n    const [month, day, year] = value.split(\"/\");\r\n\r\n    const today = isToday(\r\n      parse(value, \"MMMM/dd/yyyy\", new Date(), { locale: ru })\r\n    );\r\n\r\n    const formatMonth = (month) =>\r\n      month.slice(0, 1).toUpperCase() + month.slice(1, 3);\r\n\r\n    return (\r\n      <span>\r\n        {parseInt(day) + \" \" + formatMonth(month)}\r\n        {\"\\u00A0\"}\r\n        <i dangerouslySetInnerHTML={{ __html: \"&#183;\" }}></i>\r\n        {\"\\u00A0\"}\r\n        {today ? \"Сегодня\" : year}\r\n      </span>\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"calendar\">\r\n      <button\r\n        className=\"calendar__btn-arrow calendar__btn-arrow--left\"\r\n        onClick={() => onPrevDay()}\r\n      >\r\n        <ArrowLeftIcon className=\"calendar-btn__arrow-icon\" />\r\n      </button>\r\n      <button className=\"calendar__btn-dropdown\" onClick={onClick}>\r\n        {format(value)}\r\n      </button>\r\n      <button\r\n        className=\"calendar__btn-arrow calendar__btn-arrow--right\"\r\n        onClick={() => onNextDay()}\r\n      >\r\n        <ArrowRightIcon className=\"calendar-btn__arrow-icon\" />\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst CustomInputWithRef = forwardRef(CustomInput);\r\n\r\nfunction Calendar({ onChange, initialDate = new Date() }) {\r\n  const [date, setDate] = useState(initialDate);\r\n\r\n  useEffect(() => {\r\n    onChange(date);\r\n    console.log(\"Calendar date\", date);\r\n  }, [date]);\r\n\r\n  return (\r\n    <DatePicker\r\n      locale={ru}\r\n      dateFormat=\"MMMM/dd/yyyy\"\r\n      selected={date}\r\n      onChange={setDate}\r\n      monthsShown={3}\r\n      customInput={\r\n        <CustomInputWithRef\r\n          onNextDay={() => setDate(addDays(date, 1))}\r\n          onPrevDay={() => setDate(subDays(date, 1))}\r\n        />\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default Calendar;\r\n","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\input-date\\InputDate.jsx",["129"],"import {useEffect, useState} from 'react'\r\nimport DatePicker from \"react-datepicker\"\r\nimport {\r\n    add, \r\n    addMinutes, \r\n    getHours, \r\n    getMinutes, \r\n    isToday\r\n} from 'date-fns'\r\nimport ru from 'date-fns/locale/ru'\r\nimport './InputDate.css'\r\n\r\nimport getDateWithResetTime from '../utils/getDateWithResetTime'\r\nimport workingHours from '../utils/workingHours'\r\n\r\nfunction InputDate({\r\n    onChange,\r\n    //{dateStart, dateEnd}\r\n    selectedDate\r\n}) {\r\n    console.log('initial Date', selectedDate)\r\n    const [date, setDate] = useState(selectedDate.dateStart)\r\n    const [startTime, setStartTime] = useState(selectedDate.dateStart)\r\n    const [endTime, setEndTime] = useState(selectedDate.dateEnd)\r\n    \r\n    const minDate = new Date();\r\n    const minTime = isToday(date) ? date : workingHours.start;\r\n    const maxTime = workingHours.end\r\n\r\n    const handleChangeDate = date => {\r\n        let d;\r\n\r\n        if(isToday(date)) {\r\n            d = workingHours.getCorrectDate();\r\n            setStartTime(d)\r\n        } else {\r\n            d = date\r\n            setStartTime(workingHours.start)\r\n        }\r\n\r\n        addMinutes(startTime, 30)\r\n\r\n        setDate(d)\r\n    }\r\n\r\n    useEffect(() => {\r\n        onChange(\r\n            computeStartEndDate()\r\n        )\r\n    }, [date, startTime, endTime])\r\n\r\n    useEffect(() => {\r\n        setEndTime(addMinutes(startTime, 30))\r\n    }, [startTime])\r\n\r\n    const computeStartEndDate = () => {\r\n        const dateWithResetTime = getDateWithResetTime(date)\r\n        return {\r\n            dateStart: add(\r\n                dateWithResetTime, \r\n                {\r\n                    hours: getHours(startTime), \r\n                    minutes: getMinutes(startTime)\r\n                }\r\n            ),\r\n            dateEnd: add(\r\n                dateWithResetTime, \r\n                {\r\n                    hours: getHours(endTime),\r\n                    minutes: getMinutes(endTime)\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-date\">\r\n            <div className=\"field\">\r\n                <label htmlFor=\"event-title\">Дата</label>\r\n                <DatePicker\r\n                    locale={ru}\r\n                    dateFormat=\"dd MMMM, yyyy\"\r\n                    selected={date} \r\n                    onChange={date => handleChangeDate(date)} \r\n                    monthsShown={3}\r\n                    minDate={minDate}\r\n                />\r\n            </div>\r\n            <div className=\"field\">\r\n                <label htmlFor=\"event-title\">Начало</label>\r\n                <DatePicker\r\n                    className=\"input-time\"\r\n                    locale={ru}\r\n                    selected={startTime}\r\n                    onChange={time => setStartTime(time)}\r\n                    showTimeSelect\r\n                    showTimeSelectOnly\r\n                    timeIntervals={15}\r\n                    timeCaption=\"Время\"\r\n                    dateFormat=\"H:mm\"\r\n                    minTime={minTime}\r\n                    maxTime={maxTime}\r\n                />\r\n            </div>\r\n            <i dangerouslySetInnerHTML={{__html: \"&#8212;\"}}></i>\r\n            <div className=\"field\">\r\n                <label htmlFor=\"event-title\">Конец</label>\r\n                <DatePicker\r\n                    className=\"input-time\"\r\n                    locale={ru}\r\n                    selected={endTime}\r\n                    onChange={time => setEndTime(time)}\r\n                    showTimeSelect\r\n                    showTimeSelectOnly\r\n                    timeIntervals={15}\r\n                    timeCaption=\"Время\"\r\n                    dateFormat=\"H:mm\"\r\n                    minTime={\r\n                        addMinutes(\r\n                            startTime, \r\n                        30)\r\n                    }\r\n                    maxTime={maxTime}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputDate","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\room-select\\RoomSelect.jsx",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\participant-select\\ParticipantSelect.jsx",["130"],"import React, { useState } from 'react'\r\nimport './ParticipantSelect.css'\r\n\r\nimport { useCombobox, useMultipleSelection } from 'downshift'\r\nimport { ReactComponent as CrossIcon } from '../icons/cross.svg'\r\n\r\n\r\nfunction ParticipantSelect({\r\n    className = '',\r\n    candidates = [], \r\n    limit = candidates.length, \r\n    selectedPeople = [],\r\n    onSelectedItemsChange\r\n  }) {\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const {\r\n        getSelectedItemProps,\r\n        getDropdownProps,\r\n        addSelectedItem,\r\n        removeSelectedItem,\r\n        selectedItems\r\n    } = useMultipleSelection({\r\n      selectedItems: selectedPeople,\r\n      onSelectedItemsChange\r\n      // onSelectedItemsChange: (o) => {\r\n      //   console.log(o)\r\n      //   switch (o.type) {\r\n      //     case useMultipleSelection.stateChangeTypes.SelectedItemKeyDownBackspace:\r\n      //     case useMultipleSelection.stateChangeTypes.SelectedItemKeyDownDelete:\r\n      //         onRemoveSelectedItem(inputValue)\r\n      //         break\r\n      //     default:\r\n      //         break\r\n      //   }\r\n      // }\r\n    })\r\n\r\n    const getFilteredItems = () => {\r\n        return candidates.filter(\r\n            user =>\r\n                !selectedItems.some(sI => sI.id === user.id)&&\r\n                user.login.toLowerCase().startsWith(inputValue.toLowerCase())\r\n        )\r\n      }\r\n\r\n    const {\r\n        isOpen,\r\n        getToggleButtonProps,\r\n        getLabelProps,\r\n        getMenuProps,\r\n        getInputProps,\r\n        getComboboxProps,\r\n        highlightedIndex,\r\n        getItemProps,\r\n        selectItem\r\n    } = useCombobox({\r\n        inputValue,\r\n        defaultHighlightedIndex: 0, // after selection, highlight the first item.\r\n        items: getFilteredItems(),\r\n        onStateChange: ({ inputValue, type, selectedItem }) => {\r\n            switch (type) {\r\n                case useCombobox.stateChangeTypes.InputChange:\r\n                    setInputValue(inputValue)\r\n                    break\r\n                case useCombobox.stateChangeTypes.InputKeyDownEnter:\r\n                case useCombobox.stateChangeTypes.ItemClick:\r\n                case useCombobox.stateChangeTypes.InputBlur:\r\n                    if (\r\n                        selectedItem\r\n                        && selectedItems.length < limit\r\n                      ) {\r\n                        setInputValue('')\r\n                        addSelectedItem(selectedItem)\r\n                    }\r\n\r\n                    selectItem(null)\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n        }\r\n    })\r\n\r\n    return (\r\n      <>\r\n      <div className='participant-select'>\r\n        <div>\r\n          <div {...getComboboxProps()}>\r\n            <input\r\n              className={className}\r\n              {...getInputProps(\r\n                getDropdownProps({ preventKeyAction: isOpen }),\r\n              )}\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              className='participant-select__btn'\r\n              {...getToggleButtonProps()}\r\n              aria-label=\"toggle menu\"\r\n            >\r\n              &#9660;\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <ul {...getMenuProps()}>\r\n          {isOpen &&\r\n            getFilteredItems().map((person, index) => (\r\n              <li\r\n                style={\r\n                  highlightedIndex === index\r\n                    ? { backgroundColor: '#bde4ff' }\r\n                    : {}\r\n                }\r\n                {...getItemProps({key: person.id, index, onClick: e => console.log(e) })}\r\n              >\r\n                {person.login}\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </div>\r\n      <ul className=\"participant-list\">\r\n          {selectedItems.map(\r\n              (selectedItem, index) => (\r\n                  <li \r\n                    className='participant-chip'\r\n                    key={selectedItem.id}\r\n                    {...getSelectedItemProps({index})}\r\n                  >\r\n                      <img \r\n                        className=\"avatar-icon\"\r\n                        src={selectedItem.avatarUrl.trim()} \r\n                        alt=\"avatar\"\r\n                      />\r\n                      <div className=\"participant-chip__name\">\r\n                        {selectedItem.login}\r\n                      </div>\r\n                      <button \r\n                        onClick={e => {\r\n                          e.preventDefault()\r\n                          e.stopPropagation()\r\n                          removeSelectedItem(selectedItem)\r\n                        }}\r\n                      >\r\n                          <CrossIcon className='participant-chip__cross-icon' />\r\n                      </button>\r\n                  </li>\r\n              )\r\n          )}\r\n      </ul>\r\n      </>\r\n    )\r\n}\r\n\r\nexport default ParticipantSelect",["131","132"],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-header\\SceduleHeader.jsx",["133"],"import { useState, useEffect, useRef } from \"react\";\r\nimport \"./SceduleHeader.css\";\r\nimport Calendar from \"../../calendar/Calendar\";\r\n\r\nimport {\r\n  differenceInMinutes,\r\n  differenceInHours,\r\n  parse,\r\n  getHours,\r\n  format,\r\n  addMinutes,\r\n  set,\r\n  isToday,\r\n} from \"date-fns\";\r\n\r\nimport workingHours from \"../../utils/workingHours\";\r\nimport { pickedDateStartVar } from \"../../index\";\r\nimport isPastDay from \"../../utils/isPastDay\";\r\nimport { useReactiveVar } from \"@apollo/client\";\r\nimport { minutesToPcLeftOffset } from \"../utils\";\r\n\r\nfunction SceduleHeader() {\r\n  const timeStart = workingHours.start;\r\n  const timeEnd = workingHours.end;\r\n\r\n  const pickedDateStart = useReactiveVar(pickedDateStartVar);\r\n\r\n  const setPickedDateStartVar = (date) => {\r\n    if (!isToday(date)) {\r\n      date = set(date, {\r\n        hours: workingHours.start.getHours(),\r\n        minutes: workingHours.start.getMinutes(),\r\n      });\r\n    }\r\n\r\n    pickedDateStartVar(date);\r\n  };\r\n\r\n  const numberOfHours = differenceInHours(timeEnd, timeStart);\r\n\r\n  const getHourLabels = () => {\r\n    const hourLabels = Array.from({ length: numberOfHours }, (_, i) =>\r\n      (getHours(timeStart) + i + 1).toString()\r\n    );\r\n\r\n    const firstLabel = format(timeStart, \"H:mm\");\r\n\r\n    hourLabels.unshift(firstLabel);\r\n\r\n    return hourLabels;\r\n  };\r\n\r\n  const hourLabels = getHourLabels();\r\n\r\n  //часы\r\n  const getCurrentTime = () => {\r\n    const d = new Date();\r\n    return d.toLocaleTimeString().slice(0, 5);\r\n  };\r\n\r\n  const timerId = useRef();\r\n  const [currentTime, setCurrentTime] = useState(getCurrentTime());\r\n\r\n  useEffect(() => {\r\n    timerId.current = setInterval(() => setCurrentTime(getCurrentTime()), 1000);\r\n    return () => clearInterval(timerId.current);\r\n  }, []);\r\n\r\n  const minutesAgo = differenceInMinutes(\r\n    parse(currentTime, \"H:mm\", new Date()),\r\n    timeStart\r\n  );\r\n\r\n  const handleChangeCalendar = (date) => {\r\n    setPickedDateStartVar(date);\r\n  };\r\n\r\n  const showCurrentTime = !isPastDay(pickedDateStart);\r\n  return (\r\n    <div className=\"scedule__header\">\r\n      <Calendar onChange={handleChangeCalendar} initialDate={pickedDateStart} />\r\n      <div className=\"timeline\">\r\n        {hourLabels.map((h) => (\r\n          <div key={h} className=\"timeline-label\">\r\n            {h}\r\n          </div>\r\n        ))}\r\n\r\n        {showCurrentTime && (\r\n          <div\r\n            className=\"timeline__mark timeline__mark--current-time\"\r\n            style={{\r\n              left: minutesToPcLeftOffset(minutesAgo) + \"%\",\r\n            }}\r\n          >\r\n            {currentTime}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SceduleHeader;\r\n","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\formatEventData.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-room\\SceduleRoom.js",[],["134","135"],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\utils\\index.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\getDateWithResetTime.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\form-event\\FormEventApollo.jsx",["136","137"],"import { useHistory, useParams } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport {\n  CREATE_EVENT,\n  FETCH_DATA_FOR_EVENT_FORM,\n  FETCH_EVENTS_BY_DATE,\n  GET_EVENT,\n  UPDATE_EVENT,\n} from \"../queries.js\";\n\nimport { set, parseISO, endOfDay } from \"date-fns\";\n\nimport FormEventContainer from \"./FormEventContainer\";\n\nimport useModalService from '../hooks/useModalSevice';\n\n\n\nfunction FormEventApollo() {\n  const ModalService = useModalService();\n  const {\n    data: optionsData,\n    error: errorFetchData,\n    loading: loadingFetchData,\n  } = useQuery(FETCH_DATA_FOR_EVENT_FORM);\n\n  const history = useHistory()\n\n  const [\n    createEventMutation,\n    {\n      loading: pendingCreateEvent,\n      error: errorCreateEvent,\n      data: createEventSuccess,\n    },\n  ] = useMutation(CREATE_EVENT, {\n    onCompleted: ({createEvent: createdEvent}) => ModalService.createdEventSuccess(createdEvent, () => history.push('/'))\n  });\n\n  const [\n    updateEventMutation,\n    {\n      loading: pendingUpdateEvent,\n      error: errorUpdateEvent,\n      data: updateEventSuccess,\n    },\n  ] = useMutation(UPDATE_EVENT, {\n    onCompleted: ({updateEvent: updatedEvent}) => ModalService.updatedEventSuccess(updatedEvent, () => history.push('/'))\n  });\n\n  const { id } = useParams();\n  const isCreateMode = !id;\n\n  const {\n    data: eventData,\n    error: errorGetExistedEvent,\n    loading: loadingExistedEvent,\n  } = useQuery(GET_EVENT, {\n    skip: isCreateMode,\n    variables: {\n      id,\n    }\n  });\n\n  if (\n    loadingFetchData ||\n    pendingCreateEvent ||\n    loadingExistedEvent ||\n    pendingUpdateEvent\n  )\n    return \"Loading...\";\n\n  if (\n    errorFetchData ||\n    errorCreateEvent ||\n    errorGetExistedEvent ||\n    errorUpdateEvent\n  )\n    return \"Прозошла ошибка\";\n\n  const createEvent = (variables) => {\n    createEventMutation({\n      variables,\n      update: (cache, { data: { createEvent: createdEvent } }) => {\n        console.log(createdEvent);\n        try {\n          const date = endOfDay(parseISO(createdEvent.dateStart));\n          console.log(\n            \"date, которая должна быть такой же, как аргумент последнего запроса\",\n            date\n          );\n          const data = cache.readQuery({\n            query: FETCH_EVENTS_BY_DATE,\n            variables: {\n              date,\n            },\n          });\n\n          if (data === null) return;\n\n          cache.writeQuery({\n            query: FETCH_EVENTS_BY_DATE,\n            variables: {\n              date,\n            },\n            data: {\n              eventsOnDate: [...data.eventsOnDate, createdEvent],\n            },\n          });\n          console.log(cache);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    });\n  };\n\n  const updateEvent = (variables) => {\n    updateEventMutation({\n      variables,\n      update: (cache, { updateEvent: updatedEvent }) => {\n        try {\n          const date = set(parseISO(updatedEvent.dateStart), {\n            hours: 0,\n            minutes: 0,\n          });\n\n          let data = cache.readQuery({\n            query: FETCH_EVENTS_BY_DATE,\n            variables: { date },\n          });\n\n          if (data === null) return;\n\n          cache.writeQuery({\n            query: FETCH_EVENTS_BY_DATE,\n            variables: { date },\n            data: {\n              eventsOnDate: [...data.eventsOnDate, updatedEvent],\n            },\n          });\n        } catch (e) {\n          console.error(e);\n        }\n      },\n    });\n  };\n\n  const handleSubmit = (variables) => {\n    console.log(variables);\n    isCreateMode ? createEvent(variables) : updateEvent(variables);\n  };\n\n  const { users, rooms } = optionsData;\n\n  return (\n    <FormEventContainer\n      initialData={eventData?.event}\n      participantSelectOptions={users}\n      roomSelectOptions={rooms}\n      onSubmit={handleSubmit}\n      isCreateMode={isCreateMode}\n    />\n  );\n}\n\nexport { FormEventApollo };\n","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\form-event\\FormEventContainer.jsx",["138","139"],"import { useEffect, useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport * as Yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport FormEventView from \"./FormEventView\";\nimport { addMinutes, set, isToday, isPast } from \"date-fns\";\n\nimport { pickedDateStartVar, pickedRoomVar } from \"../index\";\nimport workingHours from \"../utils/workingHours\";\n\nfunction FormEventContainer({\n  initialData,\n  participantSelectOptions,\n  roomSelectOptions,\n  onSubmit,\n  isCreateMode,\n}) {\n  console.log(\"initialData\", initialData);\n  console.log(\"participantSelectOptions\", participantSelectOptions);\n  console.log(\"roomSelectOptions\", roomSelectOptions);\n  console.log(\"onSubmit\", onSubmit);\n  console.log(\"pickedDateStartVar\", pickedDateStartVar());\n\n  const getInitialStartEndDate = () => {\n    const dateObj = initialData\n      ? {\n          dateStart: new Date(initialData.dateStart),\n          dateEnd: new Date(initialData.dateEnd),\n        }\n      : {\n          dateStart: pickedDateStartVar(),\n          dateEnd: addMinutes(pickedDateStartVar(), 30),\n        };\n\n    if (isPast(dateObj.dateStart)) {\n      dateObj.dateStart = workingHours.getCorrectDate();\n    }\n\n    return dateObj;\n  };\n\n  const defaultValues = {\n    title: initialData?.title ?? \"\",\n    participantList: initialData?.users ?? [],\n    room: initialData?.room || pickedRoomVar() || null,\n    startEndDate: getInitialStartEndDate(),\n  };\n\n  //очистить выбранные дату и комнату после ухода из формы\n  useEffect(() => {\n    return () => {\n      pickedRoomVar(null);\n      pickedDateStartVar(\n        set(pickedDateStartVar(), {\n          hours: workingHours.start.getHours(),\n          minutes: workingHours.end.getMinutes(),\n        })\n      );\n      console.log(\"reset form\", pickedDateStartVar());\n    };\n  }, []);\n\n  const [participantsLimit, setParticipantsLimit] = useState(0);\n\n  const validationSchema = Yup.object().shape({\n    title: Yup.string().required(\"Укажите название встречи\"),\n    participantList: Yup.array()\n      .min(1, \"Выберите участников\")\n      .max(participantsLimit, \"Превышена вместимость комнаты\"),\n    room: Yup.mixed().required(\"Выберите комнату\"),\n  });\n\n  const { control, register, errors, handleSubmit, watch, reset } = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues,\n  });\n\n  useEffect(() => {\n    reset(defaultValues);\n  }, [initialData]);\n\n  const watchParticipantList = watch(\"participantList\");\n  const watchRoom = watch(\"room\");\n\n  useEffect(() => {\n    watchRoom && setParticipantsLimit(watchRoom.capacity);\n  }, [watchRoom]);\n\n  const prepareData = ({ title, startEndDate, participantList, room }) => {\n    const input = {\n      title,\n      dateStart: startEndDate.dateStart,\n      dateEnd: startEndDate.dateEnd,\n    };\n\n    const variables = {\n      input,\n    };\n\n    if (isCreateMode) {\n      variables.usersIds = participantList.map((p) => p.id);\n      variables.roomId = room.id;\n    } else {\n      variables.id = initialData.id;\n    }\n\n    onSubmit(variables);\n  };\n\n  return (\n    <FormEventView\n      participantSelectOptions={participantSelectOptions}\n      roomSelectOptions={roomSelectOptions}\n      participantsLimit={participantsLimit}\n      onSubmit={prepareData}\n      isCreateMode={isCreateMode}\n      reactHookFormProps={{\n        controller: Controller,\n        control,\n        register,\n        handleSubmit,\n        errors,\n        watchParticipantList,\n      }}\n    />\n  );\n}\n\nexport default FormEventContainer;\n","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\form-event\\FormEventView.jsx",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\form-event\\index.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\queries.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\workingHours.js",["140"],"import {parse} from 'date-fns'\r\nimport { \r\n    set,\r\n    startOfTomorrow\r\n } from 'date-fns';\r\n\r\nconst start = parse(\"8:00\", \"H:mm\", new Date())\r\nconst end = parse(\"23:00\", \"H:mm\", new Date())\r\n\r\nconst getCorrectDate = () => {\r\n    const date = new Date();\r\n\r\n    if (\r\n        date < set(date, {hours: start.getHours(), minutes: start.getMinutes()})\r\n    ) {\r\n        return set(date, {hours: start.getHours(), minutes: start.getMinutes()})\r\n    }\r\n\r\n    if (\r\n        date > set(date, {hours: end.getHours(), minutes: end.getMinutes()})\r\n    ) {\r\n        return startOfTomorrow()\r\n    }\r\n    return date\r\n}\r\n\r\nexport default {\r\n    start,\r\n    end,\r\n    getCorrectDate\r\n}","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\isPastDay.js",["141"],"import {\r\n    endOfDay,\r\n    isPast\r\n} from 'date-fns';\r\n\r\nexport default date => {\r\n    return isPast(\r\n        endOfDay(date)\r\n    )\r\n}","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-timeline\\SceduleTimeline.jsx",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-timeline\\scedule-event\\SceduleEvent.jsx",["142"],"import \"./SceduleEvent.css\";\nimport { minutesToPcDistance, minutesToPcLeftOffset } from \"../../utils\";\nimport workingHours from \"../../../utils/workingHours\";\nimport {\n  formatDate,\n  formatTimeStartEnd,\n  formatRoom,\n} from \"../../../utils/formatEventData\";\n\nimport { isPast, differenceInMinutes, set } from \"date-fns\";\n\nimport ReactTooltip from \"react-tooltip\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction SceduleEvent({ id, title, dateStart, dateEnd, users = [], room }) {\n  const calculateWidth = () => {\n    const duration = differenceInMinutes(dateEnd, dateStart);\n    return minutesToPcDistance(duration);\n  };\n\n  const calculateLeft = () => {\n    const mins = differenceInMinutes(\n      set(new Date, {\n        hours: dateStart.getHours(),\n        minutes: dateStart.getMinutes()\n      }), \n      workingHours.start\n    );\n\n    return minutesToPcLeftOffset(mins);\n  };\n\n  const history = useHistory();\n\n  const edit = () => {\n    history.push(`/event/edit/${id}`);\n  };\n\n  const firstUser = users[0];\n  return (\n    <div\n      className=\"scedule-event\"\n      style={{\n        left: calculateLeft() + \"%\",\n        width: calculateWidth() + \"%\",\n      }}\n      onClick={() => !isPast(dateStart) && edit()}\n      data-tip\n      data-for={\"scedule-event__info\" + id}\n      data-place=\"bottom\"\n    >\n      <ReactTooltip\n        id={\"scedule-event__info\" + id}\n        className=\"scedule-event__info\"\n        effect=\"solid\"\n        backgroundColor=\"white\"\n      >\n        <h4 className=\"scedule-event__info-title\">{title}</h4>\n        <div className=\"scedule-event__info-details\">\n          {`${formatDate(dateStart)}, ${formatTimeStartEnd(\n            dateStart,\n            dateEnd\n          )} ${\"\\u00B7\"} ${formatRoom(room)}`}\n        </div>\n        {firstUser && (\n          <div className=\"scedule-event__info-footer\">\n            <img\n              className=\"avatar-icon\"\n              src={firstUser.avatarUrl.trim()}\n              alt=\"participant\"\n            />\n            <div className=\"participants\">\n              {firstUser.login} из {users.length} участников\n            </div>\n          </div>\n        )}\n      </ReactTooltip>\n    </div>\n  );\n}\n\nexport default SceduleEvent;\n","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-timeline\\ButtonToCreateEvent.jsx",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-aside\\SceduleAside.jsx",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-aside\\scedule-label\\SceduleLabel.jsx",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\hooks\\useModalSevice\\index.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\hooks\\useModalSevice\\EventSuccess.jsx",[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":61,"column":6,"nodeType":"149","endLine":61,"endColumn":12,"suggestions":"150"},{"ruleId":"147","severity":1,"message":"151","line":50,"column":8,"nodeType":"149","endLine":50,"endColumn":34,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":50,"column":9,"nodeType":"155","messageId":"156","endLine":50,"endColumn":22},{"ruleId":"143","replacedBy":"157"},{"ruleId":"145","replacedBy":"158"},{"ruleId":"153","severity":1,"message":"159","line":11,"column":3,"nodeType":"155","messageId":"156","endLine":11,"endColumn":13},{"ruleId":"143","replacedBy":"160"},{"ruleId":"145","replacedBy":"161"},{"ruleId":"153","severity":1,"message":"162","line":34,"column":13,"nodeType":"155","messageId":"156","endLine":34,"endColumn":31},{"ruleId":"153","severity":1,"message":"163","line":45,"column":13,"nodeType":"155","messageId":"156","endLine":45,"endColumn":31},{"ruleId":"153","severity":1,"message":"164","line":9,"column":5,"nodeType":"155","messageId":"156","endLine":9,"endColumn":12},{"ruleId":"147","severity":1,"message":"165","line":92,"column":8,"nodeType":"149","endLine":92,"endColumn":21,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":27,"column":1,"nodeType":"169","endLine":31,"endColumn":2},{"ruleId":"167","severity":1,"message":"170","line":6,"column":1,"nodeType":"169","endLine":10,"endColumn":2},{"ruleId":"171","severity":1,"message":"172","line":23,"column":11,"nodeType":"173","messageId":"174","endLine":23,"endColumn":19,"fix":"175"},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["178"],"React Hook useEffect has missing dependencies: 'computeStartEndDate' and 'onChange'. Either include them or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["179"],"no-unused-vars","'getLabelProps' is assigned a value but never used.","Identifier","unusedVar",["176"],["177"],"'addMinutes' is defined but never used.",["176"],["177"],"'createEventSuccess' is assigned a value but never used.","'updateEventSuccess' is assigned a value but never used.","'isToday' is defined but never used.","React Hook useEffect has missing dependencies: 'defaultValues' and 'reset'. Either include them or remove the dependency array.",["180"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","Assign arrow function to a variable before exporting as module default","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"181","text":"182"},"no-global-assign","no-unsafe-negation",{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},[720,720],"()","Update the dependencies array to be: [date, onChange]",{"range":"189","text":"190"},"Update the dependencies array to be: [date, startTime, endTime, onChange, computeStartEndDate]",{"range":"191","text":"192"},"Update the dependencies array to be: [defaultValues, initialData, reset]",{"range":"193","text":"194"},[1925,1931],"[date, onChange]",[1277,1303],"[date, startTime, endTime, onChange, computeStartEndDate]",[2768,2781],"[defaultValues, initialData, reset]"]