[{"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\index.js":"1","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\App.js":"2","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\header\\Header.jsx":"3","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\button\\Button.jsx":"4","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\Scedule.jsx":"5","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\calendar\\Calendar.jsx":"6","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\timeline\\Timeline.jsx":"7","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\form-event\\FormEvent.jsx":"8","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\input-date\\InputDate.jsx":"9","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\room-select\\RoomSelect.jsx":"10","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\participant-select\\ParticipantSelect.jsx":"11","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-header\\SceduleHeader.jsx":"12","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\utils\\workingHours.js":"13","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-event\\SceduleEvent.jsx":"14","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\formatEventData.js":"15","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-room\\SceduleRoom.js":"16","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\utils\\index.js":"17","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-room\\ButtonToCreateEvent.jsx":"18","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\getDateWithResetTime.js":"19"},{"size":530,"mtime":1610718239571,"results":"20","hashOfConfig":"21"},{"size":693,"mtime":1610209340802,"results":"22","hashOfConfig":"21"},{"size":1352,"mtime":1611862634720,"results":"23","hashOfConfig":"21"},{"size":316,"mtime":1611218299784,"results":"24","hashOfConfig":"21"},{"size":3744,"mtime":1611822316975,"results":"25","hashOfConfig":"21"},{"size":2611,"mtime":1611989942310,"results":"26","hashOfConfig":"21"},{"size":1018,"mtime":1609317520030,"results":"27","hashOfConfig":"21"},{"size":9259,"mtime":1612423490612,"results":"28","hashOfConfig":"21"},{"size":3080,"mtime":1611312290680,"results":"29","hashOfConfig":"21"},{"size":2021,"mtime":1611299162475,"results":"30","hashOfConfig":"21"},{"size":4652,"mtime":1612432270502,"results":"31","hashOfConfig":"21"},{"size":3960,"mtime":1611859994676,"results":"32","hashOfConfig":"21"},{"size":173,"mtime":1610358594485,"results":"33","hashOfConfig":"21"},{"size":3215,"mtime":1611850987076,"results":"34","hashOfConfig":"21"},{"size":815,"mtime":1610709315076,"results":"35","hashOfConfig":"21"},{"size":2697,"mtime":1611258544150,"results":"36","hashOfConfig":"21"},{"size":1983,"mtime":1611850706826,"results":"37","hashOfConfig":"21"},{"size":1057,"mtime":1611258593827,"results":"38","hashOfConfig":"21"},{"size":157,"mtime":1611256974835,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"w83gyc",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\index.js",[],["88","89"],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\App.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\header\\Header.jsx",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\button\\Button.jsx",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\Scedule.jsx",["90"],"import {useEffect, useState, useRef, Fragment} from 'react'\r\nimport './Scedule.css'\r\n\r\nimport SceduleHeader from './scedule-header/SceduleHeader'\r\nimport SceduleRoom from './scedule-room/SceduleRoom'\r\n\r\nimport {parseISO} from 'date-fns'\r\nimport {uniq} from 'lodash'\r\nimport {useQuery, gql} from '@apollo/client' \r\n\r\nexport const FETCH_EVENTS_BY_DATE = gql`\r\n    query eventsOnDate($date: Date!) {\r\n        eventsOnDate(date: $date) {\r\n            id,\r\n            title,\r\n            dateStart,\r\n            dateEnd,\r\n            users {\r\n                id,\r\n                login,\r\n                homeFloor,\r\n                avatarUrl\r\n            },\r\n            room {\r\n                id,\r\n                title\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const FETCH_ALL_ROOMS = gql`\r\n    query {\r\n        rooms {\r\n            id,\r\n            title,\r\n            capacity,\r\n            floor\r\n        }\r\n    }\r\n`\r\n\r\n\r\nfunction Scedule() {\r\n    const [date, setDate] = useState(new Date())\r\n\r\n    const {data: dataEvents, loading, error} = useQuery(FETCH_EVENTS_BY_DATE, {\r\n        variables: {date}\r\n    })\r\n    const {data: dataRooms, loading: loadingRooms, error: errorRooms} = useQuery(FETCH_ALL_ROOMS)\r\n    // устанавливает часовые отметки\r\n    // узнаем их высоту\r\n    const [timestampsHeight, setTimestampsHeight] = useState(null)\r\n    const sceduleItemsEl = useRef()\r\n\r\n    useEffect(\r\n        () => {\r\n            if (sceduleItemsEl.current) {\r\n                setTimestampsHeight(sceduleItemsEl.current.offsetHeight)\r\n            }\r\n        }\r\n    ,[dataEvents, dataRooms])\r\n\r\n    if (loading||loadingRooms) return 'Loading...'\r\n\r\n    if (error||errorRooms) {\r\n        console.error(error)\r\n        return 'Error'\r\n    }\r\n    console.log('dataEvents', dataEvents)\r\n    const {eventsOnDate: events} = dataEvents\r\n    const {rooms} = dataRooms\r\n\r\n    const handleRoomMouseOver = e => {\r\n        console.log(e)\r\n        console.log('hover on room', e.pageX)\r\n    }\r\n\r\n    const handleChangeDate = date => setDate(date)\r\n\r\n    const getStageNmbs = () => {\r\n        const floorNmbs = rooms.map(r => r.floor)\r\n\r\n        return uniq(floorNmbs)\r\n    }\r\n    const stageNmbs = getStageNmbs()\r\n\r\n    return (\r\n        <div className=\"scedule\">\r\n            <SceduleHeader \r\n                timestampsHeight={timestampsHeight}\r\n                onChangeDate={handleChangeDate}\r\n                calendarInitialDate={date}\r\n            />\r\n            <div className=\"scedule__items\" ref={sceduleItemsEl}>\r\n                {stageNmbs.sort((a, b) => a - b).map(\r\n                    stageNmb => {\r\n                        const floorRooms = rooms.filter(room => room.floor === stageNmb)\r\n                        return (\r\n                            <Fragment key={stageNmb}>\r\n                            <div className=\"scedule__stage\">{stageNmb} этаж</div>\r\n                            {floorRooms.map(({id, title, capacity}) => {\r\n                                const roomEvents = events.filter(event => event.room.id === id)\r\n                                \r\n                                return <SceduleRoom \r\n                                    key={id}\r\n                                    id={id}\r\n                                    title={title}\r\n                                    capacity={capacity}\r\n                                    events={roomEvents}\r\n                                    onMouseOver={handleRoomMouseOver}\r\n                                />\r\n                            })}\r\n                            </Fragment>\r\n                        )\r\n                    }\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Scedule","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\calendar\\Calendar.jsx",["91"],"import {useState, forwardRef, useEffect} from 'react'\r\nimport './Calendar.css'\r\nimport DatePicker from \"react-datepicker\"\r\nimport \"react-datepicker/dist/react-datepicker.css\"\r\nimport {parse, addDays, subDays, isToday} from 'date-fns'\r\nimport ru from 'date-fns/locale/ru'\r\n\r\nfunction CustomInput({\r\n    value, \r\n    onClick, \r\n    onNextDay, \r\n    onPrevDay\r\n}, \r\n    _ref) {\r\n    const format = value => {\r\n        // value = MMMM/dd/yyyy\r\n        const [month, day, year] = value.split('/')\r\n\r\n        const today = isToday(\r\n            parse(value, \"MMMM/dd/yyyy\", new Date(), {locale: ru})\r\n        )\r\n\r\n        const formatMonth = month => month.slice(0, 1).toUpperCase() + month.slice(1, 3)\r\n        \r\n        return (\r\n            <span>\r\n               { parseInt(day) + \" \" + formatMonth(month)} \r\n               {\"\\u00A0\"}\r\n               <i dangerouslySetInnerHTML={{__html: \"&#183;\"}}></i>\r\n               {\"\\u00A0\"}\r\n               {today ? 'Сегодня' : year}\r\n            </span>\r\n        )\r\n    }\r\n    return (\r\n        <div className='calendar'>\r\n            <button \r\n                className=\"calendar__btn-arrow calendar__btn-arrow--left\"\r\n                onClick={() => onPrevDay()}\r\n            >\r\n                <img src=\"icons/arrow-left.svg\" alt=\"arrow-left\" />\r\n            </button>\r\n            <button className=\"calendar__btn-dropdown\" onClick={onClick}>\r\n                {format(value)} \r\n            </button>\r\n            <button \r\n                className=\"calendar__btn-arrow calendar__btn-arrow--right\"\r\n                onClick={() => onNextDay()}\r\n            >\r\n                <img src=\"icons/arrow-right.svg\" alt=\"arrow-left\"/>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst CustomInputWithRef = forwardRef(CustomInput)\r\n\r\nfunction Calendar({\r\n    onChange,\r\n    initialDate = new Date()\r\n}) {\r\n    const [date, setDate] = useState(initialDate)\r\n\r\n    useEffect(\r\n        () => onChange(date)\r\n    , [date])\r\n    \r\n    return (\r\n            <DatePicker \r\n                locale={ru}\r\n                dateFormat=\"MMMM/dd/yyyy\"\r\n                selected={date} \r\n                onChange={setDate} \r\n                monthsShown={3}\r\n                customInput={\r\n                    <CustomInputWithRef \r\n                        onNextDay={\r\n                            () => setDate( addDays(date, 1) )\r\n                        }\r\n                        onPrevDay={\r\n                            () => setDate( subDays(date, 1) )\r\n                        }\r\n                    />\r\n                }\r\n            />\r\n    )\r\n}\r\n\r\nexport default Calendar","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\timeline\\Timeline.jsx",[],["92","93"],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\form-event\\FormEvent.jsx",["94","95"],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\input-date\\InputDate.jsx",["96","97"],"import {useEffect, useState} from 'react'\r\nimport DatePicker from \"react-datepicker\"\r\nimport {add, addHours, getHours, getMinutes, set, parse} from 'date-fns'\r\nimport ru from 'date-fns/locale/ru'\r\nimport './InputDate.css'\r\n\r\nimport getDateWithResetTime from '../utils/getDateWithResetTime'\r\n\r\nfunction InputDate({\r\n    onChange,\r\n    inititalStartDate = new Date(),\r\n}) {\r\n    console.log(inititalStartDate)\r\n    const [date, setDate] = useState(inititalStartDate)\r\n    const [startTime, setStartTime] = useState(\r\n        set(date, {\r\n            hours: getHours(date), \r\n            minutes: getMinutes(date)\r\n        })\r\n    )\r\n    const [endTime, setEndTime] = useState(addHours(date, 1))\r\n\r\n    useEffect(\r\n        () => {\r\n            onChange(\r\n                computeStartEndDate()\r\n            )\r\n        }\r\n    , [date, startTime, endTime])\r\n\r\n    const computeStartEndDate = () => {\r\n        const dateWithResetTime = getDateWithResetTime(date)\r\n        return {\r\n            startDate: add(\r\n                dateWithResetTime, \r\n                {\r\n                    hours: getHours(startTime), \r\n                    minutes: getMinutes(startTime)\r\n                }\r\n            ),\r\n            endDate: add(\r\n                dateWithResetTime, \r\n                {\r\n                    hours: getHours(endTime),\r\n                    minutes: getMinutes(endTime)\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-date\">\r\n            <div className=\"field\">\r\n                <label htmlFor=\"event-title\">Дата</label>\r\n                <DatePicker\r\n                    locale={ru}\r\n                    dateFormat=\"dd MMMM, yyyy\"\r\n                    selected={date} \r\n                    onChange={date => setDate(date)} \r\n                    monthsShown={3}\r\n                />\r\n            </div>\r\n            <div className=\"field\">\r\n                <label htmlFor=\"event-title\">Начало</label>\r\n                <DatePicker\r\n                    className=\"input-time\"\r\n                    locale={ru}\r\n                    selected={startTime}\r\n                    onChange={time => setStartTime(time)}\r\n                    showTimeSelect\r\n                    showTimeSelectOnly\r\n                    timeIntervals={15}\r\n                    timeCaption=\"Время\"\r\n                    dateFormat=\"H:mm\"\r\n                />\r\n            </div>\r\n            <i dangerouslySetInnerHTML={{__html: \"&#8212;\"}}></i>\r\n            <div className=\"field\">\r\n                <label htmlFor=\"event-title\">Конец</label>\r\n                <DatePicker\r\n                    className=\"input-time\"\r\n                    locale={ru}\r\n                    selected={endTime}\r\n                    onChange={time => setEndTime(time)}\r\n                    showTimeSelect\r\n                    showTimeSelectOnly\r\n                    timeIntervals={15}\r\n                    timeCaption=\"Время\"\r\n                    dateFormat=\"H:mm\"\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputDate","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\room-select\\RoomSelect.jsx",["98"],"import React, { useState } from 'react'\r\nimport './RoomSelect.css'\r\nimport { useSelect } from 'downshift'\r\n\r\nfunction RoomSelect({initialRoom = null, rooms = [], onSelect}) {\r\n\r\n    const {\r\n        getToggleButtonProps,\r\n        getLabelProps,\r\n        getMenuProps,\r\n        getItemProps,\r\n        selectedItem,\r\n        isOpen,\r\n        highlightedIndex\r\n    } = useSelect({\r\n        selectedItem: initialRoom,\r\n        items: rooms,\r\n        onSelectedItemChange: ({selectedItem}) => onSelect(selectedItem)\r\n    })\r\n    \r\n    const renderItem = (item) => {\r\n        const {title, floor} = item\r\n        \r\n        return (\r\n            <>\r\n                {`${title}${\"\\u00A0\"}${\"\\u00B7\"}${\"\\u00A0\"}${floor} Этаж`}\r\n            </>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"field room-select\">\r\n            <label {...getLabelProps()}>Ваша переговорка</label>\r\n            <div>\r\n            <button\r\n                type=\"button\"\r\n                className='room-select__btn'\r\n                {...getToggleButtonProps()}\r\n                aria-label=\"toggle menu\"\r\n            >\r\n                {!selectedItem \r\n                    ? 'выберите комнату' \r\n                    : renderItem(selectedItem)\r\n                }\r\n            </button>\r\n            <i className=\"icon-arrow\">&#9660;</i>\r\n            </div>\r\n            <ul {...getMenuProps()}>\r\n                {isOpen &&\r\n                rooms.map((item, index) => (\r\n                    <li\r\n                        key={`${item.id}${index}`}\r\n                        {...getItemProps({ item, index })}\r\n                        style={\r\n                            highlightedIndex === index\r\n                              ? { backgroundColor: '#bde4ff' }\r\n                              : {}\r\n                          }\r\n                    >\r\n                    {renderItem(item)}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RoomSelect","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\participant-select\\ParticipantSelect.jsx",["99","100"],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-header\\SceduleHeader.jsx",["101"],"import {useState, useEffect, useRef} from 'react'\r\nimport './SceduleHeader.css'\r\nimport Calendar from '../../calendar/Calendar'\r\n\r\nimport { \r\n    differenceInMinutes, \r\n    differenceInHours, \r\n    parse, \r\n    getHours, \r\n    format,\r\n    addHours\r\n} from 'date-fns'\r\n\r\nimport workingHours from '../utils/workingHours'\r\nimport getDateWithResetTime from '../../utils/getDateWithResetTime'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\n\r\nfunction SceduleHeader({\r\n    timestampsHeight = 0,\r\n    onChangeDate,\r\n    calendarInitialDate\r\n}) {\r\n    const timeStart = workingHours.start\r\n    const timeEnd = workingHours.end\r\n\r\n    const hoursNmb = differenceInHours(\r\n        timeEnd,\r\n        timeStart\r\n    )\r\n    \r\n    const getHourLabels = () => {\r\n        const hourLabels = Array.from(\r\n            {length: hoursNmb}, \r\n            (_, i) => ( getHours(timeStart) + i + 2 ).toString()\r\n        )\r\n    \r\n        const firstLabel = format(\r\n            addHours(timeStart, 1), \r\n            \"H:mm\"\r\n        )\r\n    \r\n        hourLabels.unshift(firstLabel)\r\n\r\n        hourLabels.pop()\r\n    \r\n        return hourLabels\r\n    }\r\n    \r\n    const hourLabels = getHourLabels()\r\n    const percentsOffsetOfHour = 100 / hoursNmb\r\n    const percentsOffsetOfMin = percentsOffsetOfHour / 60\r\n    //часы\r\n    const getCurrentTime = () => {\r\n        const d = new Date()\r\n        return d.toLocaleTimeString().slice(0,5)\r\n    }\r\n\r\n    const timerId = useRef()\r\n    const [currentTime, setCurrentTime] = useState(getCurrentTime())\r\n\r\n    useEffect(\r\n        () => {\r\n            timerId.current = setInterval(() => setCurrentTime(getCurrentTime()), 1000)\r\n            return () => clearInterval(timerId.current)\r\n        }\r\n    ,[])\r\n\r\n    const x = differenceInMinutes(parse(currentTime, \"H:mm\", new Date()), timeStart)\r\n    \r\n    const location = useLocation()\r\n    \r\n    if (!location.state||!location.state.pickedStartDate) {\r\n        !location.state&&(location.state = {})\r\n        location.state.pickedStartDate = getDateWithResetTime(new Date)\r\n    }\r\n\r\n    const handleChangeCalendar = date => {\r\n        location.state.pickedStartDate = getDateWithResetTime(\r\n            date\r\n        )\r\n        onChangeDate(date)\r\n    }\r\n    return (    \r\n        <div className=\"scedule__header\">\r\n            <Calendar onChange={handleChangeCalendar} initialDate={calendarInitialDate} />\r\n            <div className=\"timeline\">\r\n                {hourLabels.map(\r\n                    (l, i, arr) => (\r\n                        <div \r\n                            key={l} \r\n                            className={\r\n                                i === arr.length -1 \r\n                                ? \"timeline__mark last-child\"\r\n                                : \"timeline__mark\"\r\n                            } \r\n                            style={{\r\n                                left:  percentsOffsetOfHour * (i+1) + \"%\"\r\n                            }}\r\n                        >\r\n                            {l}\r\n                        </div>\r\n                    )\r\n                )}\r\n\r\n                {timestampsHeight&&hourLabels.map(\r\n                    (l, i, arr) => <div \r\n                        key={l} \r\n                        className={ i === arr.length -1 ? \"scedule__timestamp last-child\" : \"scedule__timestamp\"} \r\n                        style={{left: percentsOffsetOfHour * (i+1)+ \"%\", height: timestampsHeight}}\r\n                    ></div>\r\n                )}\r\n                <div \r\n                    className=\"timeline__mark timeline__mark--current-time\" \r\n                    style={{\r\n                        left: percentsOffsetOfMin * x + \"%\"\r\n                    }}\r\n                >\r\n                    {currentTime}\r\n                    <i className=\"scedule__timestamp--current-time\" style={{height: timestampsHeight + 30}}></i>   \r\n                </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SceduleHeader","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\utils\\workingHours.js",["102"],"import {parse} from 'date-fns'\r\n\r\nconst start = parse(\"8:00\", \"H:mm\", new Date())\r\nconst end = parse(\"23:00\", \"H:mm\", new Date())\r\n\r\nexport default {\r\n    start,\r\n    end\r\n}","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-event\\SceduleEvent.jsx",["103","104","105","106"],"import {useState} from 'react'\r\nimport './SceduleEvent.css'\r\nimport {\r\n    getOffset,\r\n    getTimeInMin\r\n} from '../utils'\r\nimport workingHours from '../utils/workingHours'\r\nimport {\r\n   formatDate,\r\n   formatTimeStartEnd,\r\n   formatRoom \r\n} from '../../utils/formatEventData'\r\n\r\nimport {\r\n    format,\r\n    getMinutes,\r\n    parse,\r\n    parseISO,\r\n    getHours\r\n} from 'date-fns'\r\nimport ru from 'date-fns/locale/ru'\r\n\r\nimport ReactTooltip from 'react-tooltip'\r\nimport { useHistory } from 'react-router-dom'\r\nimport qs from 'query-string'\r\n\r\nfunction SceduleEvent({\r\n    id,\r\n    title,\r\n    dateStartISO,\r\n    dateEndISO,\r\n    users = [],\r\n    room\r\n}) {\r\n    let dateStart = parseISO(dateStartISO)\r\n    let dateEnd = parseISO(dateEndISO)\r\n\r\n    const getTimeStartEventInMin = () => { \r\n        return getTimeInMin(dateStart)\r\n    }\r\n\r\n    const calculateWidth = () => {\r\n        return (getTimeInMin(dateEnd) - getTimeInMin(dateStart)) * getOffset().ofMinutes\r\n    }\r\n\r\n    const getWorkingHoursStartInMin = () => {\r\n        return getHours(workingHours.start) * 60 + getMinutes(workingHours.start)\r\n    }\r\n\r\n    const calculateLeft = () => {\r\n        return  (\r\n            getTimeStartEventInMin() - getWorkingHoursStartInMin()\r\n        ) * getOffset().ofMinutes\r\n    }\r\n\r\n    const history = useHistory()\r\n\r\n    const edit = () => {\r\n\r\n        const eventString = qs.stringify({\r\n            id,\r\n            title,\r\n            dateStart: dateStartISO,\r\n            dateEnd: dateEndISO,\r\n            roomId: room.id,\r\n            users: users.map(u => u.id)\r\n        })\r\n\r\n        history.push({pathname: \"/formEvent\", search: eventString})\r\n    }\r\n\r\n    const firstUser = users[0]\r\n    return (\r\n        <div \r\n            className=\"scedule-event\"\r\n            style={{\r\n                left: calculateLeft() + '%',\r\n                width: calculateWidth() + '%'\r\n            }}\r\n\r\n            onClick={edit}\r\n\r\n            data-tip \r\n            data-for={\"scedule-event__info\" + id}\r\n            data-place=\"bottom\"\r\n        >\r\n            <ReactTooltip \r\n                id={\"scedule-event__info\" + id} \r\n                className=\"scedule-event__info\"\r\n                effect='solid'\r\n                backgroundColor=\"white\"\r\n            >\r\n                <h4 className=\"scedule-event__info-title\">\r\n                    {title}\r\n                </h4>\r\n                <div className=\"scedule-event__info-details\">\r\n                    {`${formatDate(dateStart)}, ${formatTimeStartEnd(dateStart, dateEnd)} ${\"\\u00B7\"} ${formatRoom(room)}`}\r\n                </div>\r\n               {\r\n                   firstUser\r\n                   &&   <div className=\"scedule-event__info-footer\">\r\n                            <img \r\n                                className=\"avatar-icon\"\r\n                                src={firstUser.avatarUrl.trim()} \r\n                                alt=\"participant\"\r\n                            />\r\n                            <div className=\"participants\">{firstUser.login} из {users.length} участников</div>\r\n                        </div>\r\n               }\r\n                \r\n            </ReactTooltip>   \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SceduleEvent","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\formatEventData.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-room\\SceduleRoom.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\utils\\index.js",[],"C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\scedule\\scedule-room\\ButtonToCreateEvent.jsx",["107"],"import Button from '../../button/Button'\r\n\r\nimport {\r\n    percentOffsetToTime\r\n} from '../utils'\r\n\r\nimport {\r\n    addMilliseconds\r\n} from 'date-fns'\r\n\r\nimport {history, useHistory, useLocation} from 'react-router-dom'\r\n\r\nfunction ButtonToCreateEvent({left, roomId}) {\r\n    const history = useHistory()\r\n\r\n    const calculateLeft = (percentages) => {\r\n        const left = percentages - 0.5\r\n        \r\n        return left < 0 ? 0 : left\r\n    }\r\n\r\n    const location = useLocation()\r\n    const handleClick = () => {\r\n        const {pickedStartDate} = location.state\r\n        const ms = percentOffsetToTime(left)\r\n        console.log(ms)\r\n        history.push('/formEvent', {\r\n            pickedStartDate: addMilliseconds(pickedStartDate, ms), \r\n            pickedRoomId: roomId\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Button\r\n            style={{\r\n                position: 'absolute',\r\n                left: calculateLeft(left) + \"%\"\r\n            }}\r\n            onClick={handleClick}\r\n        >+</Button>\r\n    )\r\n}\r\n\r\nexport default ButtonToCreateEvent","C:\\Users\\Sergey\\Desktop\\work\\work\\yandex2018-entrance-task\\src\\utils\\getDateWithResetTime.js",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":7,"column":9,"nodeType":"114","messageId":"115","endLine":7,"endColumn":17},{"ruleId":"116","severity":1,"message":"117","line":66,"column":7,"nodeType":"118","endLine":66,"endColumn":13,"suggestions":"119"},{"ruleId":"108","replacedBy":"120"},{"ruleId":"110","replacedBy":"121"},{"ruleId":"112","severity":1,"message":"122","line":1,"column":9,"nodeType":"114","messageId":"115","endLine":1,"endColumn":18},{"ruleId":"112","severity":1,"message":"123","line":65,"column":27,"nodeType":"114","messageId":"115","endLine":65,"endColumn":32},{"ruleId":"112","severity":1,"message":"124","line":3,"column":51,"nodeType":"114","messageId":"115","endLine":3,"endColumn":56},{"ruleId":"116","severity":1,"message":"125","line":29,"column":7,"nodeType":"118","endLine":29,"endColumn":33,"suggestions":"126"},{"ruleId":"112","severity":1,"message":"127","line":1,"column":17,"nodeType":"114","messageId":"115","endLine":1,"endColumn":25},{"ruleId":"112","severity":1,"message":"128","line":20,"column":9,"nodeType":"114","messageId":"115","endLine":20,"endColumn":24},{"ruleId":"112","severity":1,"message":"129","line":21,"column":9,"nodeType":"114","messageId":"115","endLine":21,"endColumn":27},{"ruleId":"130","severity":1,"message":"131","line":75,"column":63,"nodeType":"132","messageId":"133","endLine":75,"endColumn":71,"fix":"134"},{"ruleId":"135","severity":1,"message":"136","line":6,"column":1,"nodeType":"137","endLine":9,"endColumn":2},{"ruleId":"112","severity":1,"message":"127","line":1,"column":9,"nodeType":"114","messageId":"115","endLine":1,"endColumn":17},{"ruleId":"112","severity":1,"message":"138","line":15,"column":5,"nodeType":"114","messageId":"115","endLine":15,"endColumn":11},{"ruleId":"112","severity":1,"message":"124","line":17,"column":5,"nodeType":"114","messageId":"115","endLine":17,"endColumn":10},{"ruleId":"112","severity":1,"message":"139","line":21,"column":8,"nodeType":"114","messageId":"115","endLine":21,"endColumn":10},{"ruleId":"112","severity":1,"message":"140","line":11,"column":9,"nodeType":"114","messageId":"115","endLine":11,"endColumn":16},"no-native-reassign",["141"],"no-negated-in-lhs",["142"],"no-unused-vars","'parseISO' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onChange'. Either include it or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["143"],["141"],["142"],"'useEffect' is defined but never used.","'error' is assigned a value but never used.","'parse' is defined but never used.","React Hook useEffect has missing dependencies: 'computeStartEndDate' and 'onChange'. Either include them or remove the dependency array. If 'onChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["144"],"'useState' is defined but never used.","'addSelectedItem' is assigned a value but never used.","'removeSelectedItem' is assigned a value but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"145","text":"146"},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'format' is defined but never used.","'ru' is defined but never used.","'history' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},[2037,2037],"()","Update the dependencies array to be: [date, onChange]",{"range":"151","text":"152"},"Update the dependencies array to be: [date, startTime, endTime, onChange, computeStartEndDate]",{"range":"153","text":"154"},[1952,1958],"[date, onChange]",[823,849],"[date, startTime, endTime, onChange, computeStartEndDate]"]